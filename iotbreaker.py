#!/usr/bin/env python3
"""
IoTBreaker - Outil d'audit de s√©curit√© conversationnel pour les dispositifs IoT
"""

import argparse
import logging
import sys
from core.utils import run_script_yaml, initialize_audit, run_step
try:
    from core.ai_analyzer import get_ai_analysis
except:
    from core.ai_analyzer_simple import get_ai_analysis
from core.knowledge_base import load_knowledge, save_knowledge, get_recent_learnings

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def print_banner():
    """Affiche le magnifique logo ASCII IoTBreaker complet"""
    banner = """
ü§ñ IoTBreaker - Outil d'audit de s√©curit√© conversationnel IoT
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                                      ‚ïë
‚ïë  ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó  ‚ïë
‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù  ‚ïë
‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ïë
‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó   ‚ïë
‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó  ‚ïë
‚ïë  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù       ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïë
‚ïë                                                                      ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó                                                     ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó                                                    ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù                                                    ‚ïë
‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó                                                    ‚ïë
‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë                                                    ‚ïë
‚ïë  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù                                                    ‚ïë
‚ïë                                                                      ‚ïë
‚ïë  Outil d'audit de s√©curit√© conversationnel IoT                       ‚ïë
‚ïë  Version 3.0.0 - IA Conversationnelle                                ‚ïë
‚ïë                                                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

    üîç D√©couverte intelligente    üõ°Ô∏è  Tests de s√©curit√©
    ü§ñ IA conversationnelle       üìä Rapports automatiques
    üåê Int√©gration Shodan          üéØ Exploitation √©thique
"""
    print(banner)

def interactive_mode():
    """Mode conversationnel interactif avec l'IA."""
    print_banner()
    
    # Initialisation de l'audit et de la m√©moire de l'IA
    audit_context = initialize_audit()
    knowledge_base = load_knowledge()

    print("[+] Bienvenue dans le shell interactif d'IoTBreaker.")
    print("    > L'IA est pr√™te. D√©crivez votre objectif (ex: 'Lance un scan complet', 'Cherche les cam√©ras vuln√©rables').")
    print("    > Tapez 'exit' pour quitter.")
    print("    > Tapez 'help' pour voir les commandes disponibles.")
    print("    > Tapez 'status' pour voir l'√©tat actuel de l'audit.")

    while True:
        try:
            user_input = input("\n[Vous]> ").strip()
            
            if not user_input:
                continue
                
            if user_input.lower() == 'exit':
                # Avant de quitter, on demande √† l'IA de synth√©tiser ce qu'elle a appris
                print("[üß†] Synth√®se des apprentissages de cette session...")
                learning_prompt = f"""
                Bas√© sur l'historique de l'audit : {audit_context['history']},
                formule une ou deux r√®gles g√©n√©rales que nous pourrions appliquer dans le futur.
                Par exemple : 'Les appareils de type 'Routeur' sont souvent vuln√©rables au scan Telnet.'
                R√©ponds uniquement avec les r√®gles, une par ligne.
                """
                new_learnings = get_ai_analysis(learning_prompt, max_length=256)
                if new_learnings and "non disponible" not in new_learnings:
                    for learning in new_learnings.split('\n'):
                        if learning.strip():
                            knowledge_base['learnings'].append(learning.strip())
                
                save_knowledge(knowledge_base)
                print("[+] Session termin√©e. Connaissances mises √† jour.")
                break

            elif user_input.lower() == 'help':
                print("\n[üìñ] COMMANDES DISPONIBLES")
                print("=" * 50)
                print("\nüîç COMMANDES DE D√âCOUVERTE :")
                print("  ‚Ä¢ 'Lance un scan complet' - D√©couverte + analyse + v√©rification")
                print("  ‚Ä¢ 'D√©couvre les appareils' - Scan r√©seau pour trouver les IoT")
                print("  ‚Ä¢ 'Trouve les cam√©ras' - Recherche sp√©cifique de cam√©ras IP")
                print("  ‚Ä¢ 'Cherche les routeurs' - Identification des routeurs")
                print("  ‚Ä¢ 'D√©tecte les ampoules connect√©es' - Recherche d'ampoules IoT")
                print("  ‚Ä¢ 'Trouve les thermostats' - D√©tection de thermostats intelligents")
                print("  ‚Ä¢ 'Scan WiFi' - D√©couverte des r√©seaux WiFi")
                print("  ‚Ä¢ 'Scan Bluetooth' - Recherche d'appareils Bluetooth")
                
                print("\nüî¨ COMMANDES D'ANALYSE :")
                print("  ‚Ä¢ 'Analyse tous les appareils' - Analyse compl√®te des ports")
                print("  ‚Ä¢ 'Analyse cette IP 192.168.1.1' - Analyse d'une IP sp√©cifique")
                print("  ‚Ä¢ 'V√©rifie les ports ouverts' - Scan des ports sur les appareils")
                print("  ‚Ä¢ 'Analyse les services' - Identification des services actifs")
                print("  ‚Ä¢ 'Fingerprint les appareils' - Identification des types d'appareils")
                print("  ‚Ä¢ 'Analyse les banni√®res' - Extraction des banni√®res serveur")
                
                print("\nüõ°Ô∏è COMMANDES DE S√âCURIT√â :")
                print("  ‚Ä¢ 'Cherche les vuln√©rabilit√©s' - Test de vuln√©rabilit√©s")
                print("  ‚Ä¢ 'Teste les mots de passe par d√©faut' - Test d'authentification")
                print("  ‚Ä¢ 'V√©rifie les ports Telnet' - Test des ports Telnet")
                print("  ‚Ä¢ 'Teste les ports SSH' - V√©rification SSH")
                print("  ‚Ä¢ 'Cherche les failles web' - Test des interfaces web")
                print("  ‚Ä¢ 'V√©rifie les configurations faibles' - Audit de configuration")
                print("  ‚Ä¢ 'Teste les exploits connus' - Tests d'exploitation")
                
                print("\nüìä COMMANDES DE RAPPORT :")
                print("  ‚Ä¢ 'G√©n√®re un rapport' - Cr√©ation d'un rapport complet")
                print("  ‚Ä¢ 'Cr√©e un rapport HTML' - Rapport interactif HTML")
                print("  ‚Ä¢ 'G√©n√®re un rapport PDF' - Rapport PDF d√©taill√©")
                print("  ‚Ä¢ 'Exporte les r√©sultats' - Export des donn√©es")
                print("  ‚Ä¢ 'Affiche les vuln√©rabilit√©s' - Liste des vuln√©rabilit√©s trouv√©es")
                print("  ‚Ä¢ 'R√©sum√© de l'audit' - Synth√®se des r√©sultats")
                
                print("\nüåê COMMANDES SHODAN :")
                print("  ‚Ä¢ 'Analyse mon IP publique' - Recherche Shodan de votre IP")
                print("  ‚Ä¢ 'Cherche des appareils similaires' - Recherche g√©olocalis√©e")
                print("  ‚Ä¢ 'V√©rifie ma visibilit√© externe' - Audit de visibilit√©")
                
                print("\nüß† COMMANDES IA :")
                print("  ‚Ä¢ 'Que penses-tu de ces r√©sultats ?' - Analyse IA des r√©sultats")
                print("  ‚Ä¢ 'Sugg√®re les prochaines √©tapes' - Recommandations IA")
                print("  ‚Ä¢ 'Analyse les risques' - √âvaluation des risques par IA")
                print("  ‚Ä¢ 'Quelles sont tes recommandations ?' - Conseils strat√©giques")
                
                print("\n‚öôÔ∏è COMMANDES SYST√àME :")
                print("  ‚Ä¢ 'status' - √âtat actuel de l'audit")
                print("  ‚Ä¢ 'clear' - Efface l'√©cran")
                print("  ‚Ä¢ 'history' - Historique des commandes")
                print("  ‚Ä¢ 'config' - Configuration actuelle")
                print("  ‚Ä¢ 'exit' - Quitter le shell")
                
                print("\nüí° EXEMPLES DE COMMANDES NATURELLES :")
                print("  ‚Ä¢ 'Salut, peux-tu scanner mon r√©seau ?'")
                print("  ‚Ä¢ 'Je veux v√©rifier la s√©curit√© de mes cam√©ras'")
                print("  ‚Ä¢ 'Y a-t-il des vuln√©rabilit√©s sur mon routeur ?'")
                print("  ‚Ä¢ 'Peux-tu analyser cette adresse IP ?'")
                print("  ‚Ä¢ 'G√©n√®re un rapport de s√©curit√© pour mon patron'")
                print("  ‚Ä¢ 'Que recommandes-tu pour s√©curiser mon IoT ?'")
                continue

            elif user_input.lower() == 'status':
                print(f"\n[üìä] √âtat de l'audit :")
                print(f"  ‚Ä¢ Appareils d√©couverts : {len(audit_context['devices_found'])}")
                print(f"  ‚Ä¢ Vuln√©rabilit√©s trouv√©es : {len(audit_context['vulnerabilities'])}")
                print(f"  ‚Ä¢ Actions effectu√©es : {len(audit_context['history'])}")
                print(f"  ‚Ä¢ Connaissances IA : {len(knowledge_base['learnings'])} r√®gles apprises")
                if audit_context['devices_found']:
                    print(f"  ‚Ä¢ Appareils : {', '.join(audit_context['devices_found'])}")
                if audit_context['vulnerabilities']:
                    print(f"  ‚Ä¢ Vuln√©rabilit√©s : {len([v for v in audit_context['vulnerabilities'] if v.get('severity') == 'High'])} critiques")
                continue

            elif user_input.lower() == 'clear':
                import os
                os.system('cls' if os.name == 'nt' else 'clear')
                print_banner()
                print("[+] √âcran effac√©. Continuez votre audit...")
                continue

            elif user_input.lower() == 'history':
                print(f"\n[üìú] Historique des commandes ({len(audit_context['history'])} actions) :")
                for i, action in enumerate(audit_context['history'], 1):
                    print(f"  {i}. {action}")
                continue

            elif user_input.lower() == 'config':
                print(f"\n[‚öôÔ∏è] Configuration actuelle :")
                print(f"  ‚Ä¢ Mode : Conversationnel avec IA")
                print(f"  ‚Ä¢ Base de connaissances : {len(knowledge_base['learnings'])} r√®gles")
                print(f"  ‚Ä¢ Contexte d'audit : {len(audit_context['devices'])} appareils")
                print(f"  ‚Ä¢ Historique : {len(audit_context['history'])} actions")
                continue

            # L'IA interpr√®te la commande de l'utilisateur
            ai_prompt = f"""
            Contexte de l'audit : {len(audit_context['devices_found'])} appareils trouv√©s.
            Savoirs ant√©rieurs : {get_recent_learnings(knowledge_base, 3)}
            Commande de l'utilisateur : '{user_input}'

            Analyse cette commande et traduis-la en action(s) syst√®me. Choisis parmi :

            D√âCOUVERTE :
            - DISCOVER (d√©couverte g√©n√©rale)
            - DISCOVER_CAMERAS (recherche cam√©ras)
            - DISCOVER_ROUTERS (recherche routeurs)
            - DISCOVER_BULBS (recherche ampoules)
            - DISCOVER_THERMOSTATS (recherche thermostats)
            - SCAN_WIFI (scan WiFi)
            - SCAN_BLUETOOTH (scan Bluetooth)

            ANALYSE :
            - ANALYZE <IP|all> (analyse ports)
            - ANALYZE_SERVICES <IP|all> (analyse services)
            - FINGERPRINT <IP|all> (fingerprint)
            - BANNER_GRAB <IP|all> (banni√®res)

            S√âCURIT√â :
            - CHECK <IP|all> (vuln√©rabilit√©s g√©n√©rales)
            - CHECK_DEFAULTS <IP|all> (mots de passe par d√©faut)
            - CHECK_TELNET <IP|all> (ports Telnet)
            - CHECK_SSH <IP|all> (ports SSH)
            - CHECK_WEB <IP|all> (interfaces web)
            - CHECK_CONFIG <IP|all> (configurations)

            RAPPORT :
            - REPORT (rapport complet)
            - REPORT_HTML (rapport HTML)
            - REPORT_PDF (rapport PDF)
            - EXPORT (export donn√©es)

            SHODAN :
            - SHODAN_IP (analyse IP publique)
            - SHODAN_SIMILAR (recherche similaire)
            - SHODAN_VISIBILITY (visibilit√© externe)

            IA :
            - AI_ANALYSIS (analyse IA des r√©sultats)
            - AI_RECOMMENDATIONS (recommandations IA)
            - AI_RISKS (√©valuation risques IA)

            R√©ponds uniquement avec la commande. Exemple : ANALYZE 192.168.1.1
            Si la commande n'est pas claire, r√©ponds : UNKNOWN
            """
            
            print("[üß†] L'IA interpr√®te votre commande...")
            action = get_ai_analysis(ai_prompt, max_length=64)
            print(f"  [+] Action d√©termin√©e par l'IA : {action}")

            # Ex√©cution de l'action
            if action:
                run_step(action, audit_context)
            else:
                print("[!] L'IA n'a pas pu d√©terminer d'action claire.")

        except KeyboardInterrupt:
            print("\n\n[!] Interruption d√©tect√©e. Tapez 'exit' pour quitter proprement.")
        except Exception as e:
            print(f"[!] Erreur : {e}")

def script_mode():
    """Mode script classique pour la r√©tro-compatibilit√©."""
    parser = argparse.ArgumentParser(description="IoTBreaker - Outil d'audit de s√©curit√© pour les dispositifs IoT")
    parser.add_argument("scenario", help="Chemin vers le fichier de sc√©nario YAML √† ex√©cuter")
    parser.add_argument("-v", "--verbose", action="store_true", help="Afficher plus de d√©tails")
    parser.add_argument("--ai-driven", action="store_true", help="Activer le mode d'audit pilot√© par l'IA")
    
    args = parser.parse_args()
    
    # Affichage de la banni√®re
    print_banner()
    
    try:
        # Ex√©cution du sc√©nario en passant le nouvel argument
        run_script_yaml(args.scenario, args.ai_driven)
        print("\n‚úì Audit termin√© avec succ√®s!")
    except Exception as e:
        print(f"\n‚úó Erreur lors de l'ex√©cution: {str(e)}")
        sys.exit(1)

def main():
    """Fonction principale - D√©tecte automatiquement le mode √† utiliser."""
    if len(sys.argv) > 1 and sys.argv[1] not in ['-h', '--help', '-v', '--verbose', '--ai-driven']:
        # Mode script classique
        script_mode()
    else:
        # Mode conversationnel interactif
        try:
            interactive_mode()
        except (EOFError, KeyboardInterrupt):
            print("\n[!] Session interrompue. Au revoir !")
            sys.exit(0)

if __name__ == "__main__":
    main()
