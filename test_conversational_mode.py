#!/usr/bin/env python3
"""
Script de test pour le mode conversationnel d'IoTBreaker
"""

import sys
import os

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_knowledge_base():
    """Test de la base de connaissances"""
    print("üß† Test de la base de connaissances...")
    
    try:
        from core.knowledge_base import load_knowledge, save_knowledge, add_learning, get_recent_learnings
        
        # Test de chargement
        kb = load_knowledge()
        print(f"  [+] Base de connaissances charg√©e : {len(kb['learnings'])} r√®gles")
        
        # Test d'ajout d'apprentissage
        test_learning = "Les routeurs TP-Link sont souvent vuln√©rables aux attaques par d√©faut"
        add_learning(kb, test_learning)
        print(f"  [+] Nouvel apprentissage ajout√© : {test_learning}")
        
        # Test de sauvegarde
        save_knowledge(kb)
        print("  [+] Base de connaissances sauvegard√©e")
        
        # Test de r√©cup√©ration des apprentissages r√©cents
        recent = get_recent_learnings(kb, 3)
        print(f"  [+] Apprentissages r√©cents : {recent}")
        
        return True
        
    except Exception as e:
        print(f"  [!] Erreur lors du test de la base de connaissances : {e}")
        return False

def test_audit_context():
    """Test du contexte d'audit"""
    print("\nüìä Test du contexte d'audit...")
    
    try:
        from core.utils import initialize_audit, run_step
        
        # Test d'initialisation
        context = initialize_audit()
        print(f"  [+] Contexte d'audit initialis√© : {len(context['devices'])} appareils")
        
        # Test d'ajout d'appareil
        context['devices']['192.168.1.1'] = {'ip': '192.168.1.1', 'type': 'Routeur'}
        context['devices_found'] = list(context['devices'].keys())
        print(f"  [+] Appareil ajout√© au contexte : {context['devices_found']}")
        
        return True
        
    except Exception as e:
        print(f"  [!] Erreur lors du test du contexte d'audit : {e}")
        return False

def test_ai_interpretation():
    """Test de l'interpr√©tation IA des commandes"""
    print("\nü§ñ Test de l'interpr√©tation IA des commandes...")
    
    try:
        from core.ai_analyzer import get_ai_analysis
        
        # Test de diff√©rentes commandes
        test_commands = [
            "Lance un scan complet",
            "Cherche les vuln√©rabilit√©s",
            "Analyse cette IP 192.168.1.1",
            "G√©n√®re un rapport"
        ]
        
        for i, command in enumerate(test_commands, 1):
            print(f"  [*] Test {i}: '{command}'")
            
            ai_prompt = f"""
            Contexte de l'audit : 2 appareils trouv√©s.
            Savoirs ant√©rieurs : ['Les routeurs sont souvent vuln√©rables']
            Commande de l'utilisateur : '{command}'

            Traduis cette commande en une action syst√®me concr√®te. Choisis parmi :
            - DISCOVER
            - ANALYZE <IP|all>
            - CHECK <IP|all>
            - REPORT
            
            R√©ponds uniquement avec la commande. Exemple : ANALYZE 192.168.1.1
            """
            
            try:
                action = get_ai_analysis(ai_prompt, max_length=64)
                print(f"    [+] Action IA : {action}")
            except Exception as e:
                print(f"    [!] Erreur IA : {e}")
        
        return True
        
    except Exception as e:
        print(f"  [!] Erreur lors du test de l'interpr√©tation IA : {e}")
        return False

def test_conversational_flow():
    """Test du flux conversationnel complet"""
    print("\nüí¨ Test du flux conversationnel...")
    
    try:
        from core.utils import initialize_audit, run_step
        from core.knowledge_base import load_knowledge, save_knowledge
        from core.ai_analyzer import get_ai_analysis
        
        # Simulation d'une session conversationnelle
        print("  [*] Simulation d'une session d'audit...")
        
        # Initialisation
        context = initialize_audit()
        kb = load_knowledge()
        
        # Commande 1 : D√©couverte
        print("  [*] Commande utilisateur : 'Lance un scan complet'")
        ai_prompt = """
        Contexte de l'audit : 0 appareils trouv√©s.
        Savoirs ant√©rieurs : []
        Commande de l'utilisateur : 'Lance un scan complet'

        Traduis cette commande en une action syst√®me concr√®te. Choisis parmi :
        - DISCOVER
        - ANALYZE <IP|all>
        - CHECK <IP|all>
        - REPORT
        
        R√©ponds uniquement avec la commande. Exemple : ANALYZE 192.168.1.1
        """
        
        action = get_ai_analysis(ai_prompt, max_length=64)
        print(f"    [+] Action IA : {action}")
        
        # Simulation de l'ex√©cution (sans vraiment scanner)
        if "DISCOVER" in action:
            print("    [+] Simulation : D√©couverte d'appareils...")
            context['devices']['192.168.1.1'] = {'ip': '192.168.1.1', 'type': 'Routeur'}
            context['devices_found'] = list(context['devices'].keys())
            context['history'].append(action)
        
        print(f"    [+] R√©sultat : {len(context['devices_found'])} appareils trouv√©s")
        
        return True
        
    except Exception as e:
        print(f"  [!] Erreur lors du test du flux conversationnel : {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test du mode conversationnel d'IoTBreaker")
    print("=" * 60)
    
    # Tests
    kb_ok = test_knowledge_base()
    context_ok = test_audit_context()
    ai_ok = test_ai_interpretation()
    flow_ok = test_conversational_flow()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DES TESTS CONVERSATIONNELS")
    print("=" * 60)
    print(f"  üß† Base de connaissances : {'‚úÖ OK' if kb_ok else '‚ùå √âCHEC'}")
    print(f"  üìä Contexte d'audit : {'‚úÖ OK' if context_ok else '‚ùå √âCHEC'}")
    print(f"  ü§ñ Interpr√©tation IA : {'‚úÖ OK' if ai_ok else '‚ùå √âCHEC'}")
    print(f"  üí¨ Flux conversationnel : {'‚úÖ OK' if flow_ok else '‚ùå √âCHEC'}")
    
    if kb_ok and context_ok and ai_ok and flow_ok:
        print("\nüéâ Tous les tests conversationnels sont pass√©s !")
        print("   IoTBreaker est maintenant un outil conversationnel :")
        print("   ‚Ä¢ python iotbreaker.py (lance le mode conversationnel)")
        print("   ‚Ä¢ Dialoguez avec l'IA en langage naturel")
        print("   ‚Ä¢ L'IA apprend et s'am√©liore √† chaque session")
        print("   ‚Ä¢ Mode script toujours disponible pour la r√©tro-compatibilit√©")
    else:
        print("\n‚ö†Ô∏è  Certains tests conversationnels ont √©chou√©.")
        print("   V√©rifiez la configuration de l'IA et les d√©pendances.")

if __name__ == "__main__":
    main() 