#!/usr/bin/env python3
"""
Test de compatibilit√© Kali Linux pour IoTBreaker
"""

import sys
import os
import platform
import subprocess

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def check_kali_environment():
    """V√©rification de l'environnement Kali Linux"""
    print("üêß V√âRIFICATION ENVIRONNEMENT KALI LINUX")
    print("=" * 50)
    
    # V√©rification du syst√®me d'exploitation
    system = platform.system()
    print(f"  Syst√®me d'exploitation : {system}")
    
    if system != "Linux":
        print("  ‚ö†Ô∏è  IoTBreaker est con√ßu pour Linux (Kali)")
        print("  üí° Pour Windows, utilisez WSL ou une VM Kali")
        return False
    
    # V√©rification de la distribution
    try:
        with open('/etc/os-release', 'r') as f:
            os_info = f.read()
            if 'kali' in os_info.lower():
                print("  ‚úÖ Distribution Kali Linux d√©tect√©e")
            else:
                print("  ‚ö†Ô∏è  Distribution Linux d√©tect√©e (pas Kali)")
                print("  üí° Recommand√© : Kali Linux pour les outils de s√©curit√©")
    except:
        print("  ‚ö†Ô∏è  Impossible de d√©tecter la distribution")
    
    # V√©rification des outils Linux requis
    linux_tools = [
        "nmap",
        "netstat", 
        "ip",
        "ping",
        "curl",
        "wget"
    ]
    
    print("\n  V√©rification des outils Linux :")
    for tool in linux_tools:
        try:
            result = subprocess.run([tool, "--version"], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print(f"    ‚úÖ {tool} disponible")
            else:
                print(f"    ‚ùå {tool} non disponible")
        except:
            print(f"    ‚ùå {tool} non install√©")
    
    return True

def test_linux_network_scan():
    """Test des fonctionnalit√©s r√©seau Linux"""
    print("\nüåê TEST DES FONCTIONNALIT√âS R√âSEAU LINUX")
    print("=" * 40)
    
    try:
        # Test de d√©couverte r√©seau
        from core.discover import run
        
        print("  [*] Test de d√©couverte r√©seau...")
        # Test avec localhost pour √©viter les scans r√©seau r√©els
        result = run("127.0.0.1")
        print("  ‚úÖ Module de d√©couverte fonctionnel")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erreur r√©seau : {e}")
        return False

def test_linux_security_tools():
    """Test des outils de s√©curit√© Linux"""
    print("\nüõ°Ô∏è TEST DES OUTILS DE S√âCURIT√â")
    print("=" * 35)
    
    try:
        # Test des modules de s√©curit√©
        from core.check import run
        from core.exploit import run as exploit_run
        
        print("  [*] Test des modules de s√©curit√©...")
        
        # Test de v√©rification de vuln√©rabilit√©s
        check_result = run("127.0.0.1")
        print("  ‚úÖ Module de v√©rification fonctionnel")
        
        # Test d'exploitation (simulation)
        exploit_result = exploit_run({"ip": "127.0.0.1", "type": "test"})
        print("  ‚úÖ Module d'exploitation fonctionnel")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Erreur s√©curit√© : {e}")
        return False

def test_kali_specific_features():
    """Test des fonctionnalit√©s sp√©cifiques √† Kali"""
    print("\nüéØ FONCTIONNALIT√âS SP√âCIFIQUES KALI")
    print("=" * 40)
    
    features = {
        "Scan r√©seau avanc√©": False,
        "D√©tection de vuln√©rabilit√©s": False,
        "Exploitation IoT": False,
        "Rapports de s√©curit√©": False,
        "Mode conversationnel": False,
        "IA d'analyse": False
    }
    
    try:
        # Test du scan r√©seau
        from core.discover import run
        run("127.0.0.1")
        features["Scan r√©seau avanc√©"] = True
        
        # Test de d√©tection de vuln√©rabilit√©s
        from core.check import run
        run("127.0.0.1")
        features["D√©tection de vuln√©rabilit√©s"] = True
        
        # Test d'exploitation
        from core.exploit import run
        run({"ip": "127.0.0.1", "type": "test"})
        features["Exploitation IoT"] = True
        
        # Test des rapports
        from core.reporting import generate_html_report
        generate_html_report([], "Test Kali")
        features["Rapports de s√©curit√©"] = True
        
        # Test du mode conversationnel
        from core.ai_analyzer_simple import get_ai_analysis
        get_ai_analysis("test")
        features["Mode conversationnel"] = True
        features["IA d'analyse"] = True
        
    except Exception as e:
        print(f"  ‚ùå Erreur : {e}")
    
    # Afficher les r√©sultats
    for feature, status in features.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"  {status_icon} {feature}")
    
    return sum(features.values()) >= len(features) * 0.8

def test_installation_guide():
    """Test du guide d'installation Kali"""
    print("\nüìã GUIDE D'INSTALLATION KALI")
    print("=" * 35)
    
    print("""
  üêß INSTALLATION SUR KALI LINUX :
  
  1. Mise √† jour du syst√®me :
     sudo apt update && sudo apt upgrade -y
  
  2. Installation des d√©pendances :
     sudo apt install python3 python3-pip nmap net-tools -y
  
  3. Installation des d√©pendances Python :
     pip3 install -r requirements.txt
  
  4. Test de l'installation :
     python3 iotbreaker.py
  
  5. Utilisation :
     python3 iotbreaker.py  # Mode conversationnel
     python3 iotbreaker.py scripts/audit_iot_rapide.yaml  # Mode script
  """)
    
    return True

def main():
    """Test principal de compatibilit√© Kali"""
    print("üêß TEST DE COMPATIBILIT√â KALI LINUX - IoTBreaker")
    print("=" * 60)
    print("IoTBreaker est un outil CLI con√ßu pour Kali Linux")
    print("=" * 60)
    
    # Tests
    kali_env_ok = check_kali_environment()
    network_ok = test_linux_network_scan()
    security_ok = test_linux_security_tools()
    kali_features_ok = test_kali_specific_features()
    install_ok = test_installation_guide()
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â COMPATIBILIT√â KALI")
    print("=" * 60)
    print(f"  üêß Environnement Kali : {'‚úÖ OK' if kali_env_ok else '‚ùå √âCHEC'}")
    print(f"  üåê Fonctionnalit√©s r√©seau : {'‚úÖ OK' if network_ok else '‚ùå √âCHEC'}")
    print(f"  üõ°Ô∏è Outils de s√©curit√© : {'‚úÖ OK' if security_ok else '‚ùå √âCHEC'}")
    print(f"  üéØ Fonctionnalit√©s Kali : {'‚úÖ OK' if kali_features_ok else '‚ùå √âCHEC'}")
    print(f"  üìã Guide installation : {'‚úÖ OK' if install_ok else '‚ùå √âCHEC'}")
    
    total_tests = 5
    passed_tests = sum([kali_env_ok, network_ok, security_ok, kali_features_ok, install_ok])
    
    print(f"\nüìä R√âSULTAT : {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests >= total_tests * 0.8:
        print("\nüéâ IoTBreaker est compatible avec Kali Linux !")
        print("   L'outil est pr√™t pour l'audit de s√©curit√© IoT.")
        print("\n   Utilisation sur Kali :")
        print("   ‚Ä¢ Mode conversationnel : python3 iotbreaker.py")
        print("   ‚Ä¢ Mode script : python3 iotbreaker.py scripts/audit_iot_rapide.yaml")
        print("   ‚Ä¢ Audit complet : python3 iotbreaker.py scripts/audit_iot_complet.yaml")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} test(s) ont √©chou√©.")
        print("   V√©rifiez l'installation sur Kali Linux.")

if __name__ == "__main__":
    main() 