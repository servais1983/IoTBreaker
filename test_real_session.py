#!/usr/bin/env python3
"""
Test en situation r√©elle d'IoTBreaker - Simulation d'une session compl√®te
"""

import sys
import os
import subprocess
import time

# Ajouter le r√©pertoire courant au path pour importer les modules
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_real_conversational_session():
    """Test d'une session conversationnelle r√©elle"""
    print("üéØ TEST EN SITUATION R√âELLE - IoTBreaker")
    print("=" * 60)
    
    # Commandes r√©elles √† tester (comme dans le README)
    commands = [
        "help",
        "status",
        "Lance un scan complet",
        "Analyse tous les appareils", 
        "Cherche les vuln√©rabilit√©s",
        "Que penses-tu de ces r√©sultats ?",
        "Quelles sont tes recommandations ?",
        "G√©n√®re un rapport",
        "exit"
    ]
    
    print("Commandes qui seront test√©es (selon le README) :")
    for i, cmd in enumerate(commands, 1):
        print(f"  {i}. {cmd}")
    
    print("\n[*] D√©marrage du test en situation r√©elle...")
    
    try:
        # Pr√©parer l'entr√©e batch
        input_data = "\n".join(commands) + "\n"
        
        # D√©marrer IoTBreaker en mode conversationnel
        process = subprocess.Popen(
            [sys.executable, "iotbreaker.py"],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        print("[+] IoTBreaker d√©marr√© en mode conversationnel")
        
        # Envoyer toutes les commandes et r√©cup√©rer la sortie
        output, error = process.communicate(input=input_data, timeout=120)
        
        print("\n" + "=" * 60)
        print("üìã SORTIE COMPL√àTE D'IoTBreaker")
        print("=" * 60)
        print(output)
        
        if error:
            print("\n" + "=" * 60)
            print("‚ö†Ô∏è ERREURS D√âTECT√âES")
            print("=" * 60)
            print(error)
        
        # Analyser la sortie
        print("\n" + "=" * 60)
        print("üîç ANALYSE DE LA SESSION")
        print("=" * 60)
        
        output_lines = output.split('\n')
        
        # V√©rifications
        checks = {
            "Logo affich√©": False,
            "Bienvenue affich√©": False,
            "Aide affich√©e": False,
            "Status affich√©": False,
            "Scan lanc√©": False,
            "Analyse effectu√©e": False,
            "Vuln√©rabilit√©s cherch√©es": False,
            "IA a r√©pondu": False,
            "Recommandations donn√©es": False,
            "Rapport g√©n√©r√©": False,
            "Session termin√©e": False
        }
        
        for line in output_lines:
            line_lower = line.lower()
            
            if "iot" in line_lower and "outil" in line_lower:
                checks["Logo affich√©"] = True
            if "bienvenue" in line_lower:
                checks["Bienvenue affich√©"] = True
            if "commandes disponibles" in line_lower or "help" in line_lower:
                checks["Aide affich√©e"] = True
            if "√©tat de l'audit" in line_lower or "appareils d√©couverts" in line_lower:
                checks["Status affich√©"] = True
            if "scan" in line_lower and ("lanc√©" in line_lower or "d√©couverte" in line_lower):
                checks["Scan lanc√©"] = True
            if "analyse" in line_lower and ("effectu√©e" in line_lower or "ports" in line_lower):
                checks["Analyse effectu√©e"] = True
            if "vuln√©rabilit√©s" in line_lower and ("cherch√©es" in line_lower or "trouv√©es" in line_lower):
                checks["Vuln√©rabilit√©s cherch√©es"] = True
            if "ia" in line_lower and ("interpr√®te" in line_lower or "analyse" in line_lower):
                checks["IA a r√©pondu"] = True
            if "recommandations" in line_lower:
                checks["Recommandations donn√©es"] = True
            if "rapport" in line_lower and ("g√©n√©r√©" in line_lower or "cr√©√©" in line_lower):
                checks["Rapport g√©n√©r√©"] = True
            if "session termin√©e" in line_lower or "exit" in line_lower:
                checks["Session termin√©e"] = True
        
        # Afficher les r√©sultats
        print("V√©rifications de la session :")
        for check, status in checks.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {check}")
        
        # R√©sum√©
        passed_checks = sum(checks.values())
        total_checks = len(checks)
        
        print(f"\nüìä R√âSULTAT : {passed_checks}/{total_checks} v√©rifications r√©ussies")
        
        if passed_checks >= total_checks * 0.8:  # 80% de r√©ussite
            print("\nüéâ IoTBreaker fonctionne correctement en situation r√©elle !")
            print("   Toutes les fonctionnalit√©s du README sont op√©rationnelles.")
            return True
        else:
            print(f"\n‚ö†Ô∏è {total_checks - passed_checks} v√©rifications ont √©chou√©.")
            print("   Certaines fonctionnalit√©s peuvent ne pas fonctionner comme attendu.")
            return False
        
    except Exception as e:
        print(f"[!] Erreur lors du test : {e}")
        return False

def test_script_mode():
    """Test du mode script (r√©tro-compatibilit√©)"""
    print("\n" + "=" * 60)
    print("üìú TEST DU MODE SCRIPT (R√©tro-compatibilit√©)")
    print("=" * 60)
    
    try:
        # Test avec le script rapide
        print("[*] Test du script audit_iot_rapide.yaml...")
        
        process = subprocess.Popen(
            [sys.executable, "iotbreaker.py", "scripts/audit_iot_rapide.yaml"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        output, error = process.communicate(timeout=60)
        
        if "audit" in output.lower() or "scan" in output.lower():
            print("‚úÖ Mode script fonctionne correctement")
            return True
        else:
            print("‚ùå Mode script ne fonctionne pas comme attendu")
            print(f"Sortie : {output[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur mode script : {e}")
        return False

def main():
    """Test principal en situation r√©elle"""
    print("üöÄ TEST EN SITUATION R√âELLE D'IoTBreaker")
    print("=" * 60)
    print("Ce test v√©rifie que IoTBreaker fonctionne exactement comme d√©crit dans le README")
    print("=" * 60)
    
    # Test du mode conversationnel
    conversational_ok = test_real_conversational_session()
    
    # Test du mode script
    script_ok = test_script_mode()
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â FINAL")
    print("=" * 60)
    print(f"  üí¨ Mode conversationnel : {'‚úÖ OK' if conversational_ok else '‚ùå √âCHEC'}")
    print(f"  üìú Mode script : {'‚úÖ OK' if script_ok else '‚ùå √âCHEC'}")
    
    if conversational_ok and script_ok:
        print("\nüéâ IoTBreaker est 100% fonctionnel en situation r√©elle !")
        print("   Toutes les fonctionnalit√©s du README sont op√©rationnelles.")
        print("   Vous pouvez utiliser :")
        print("   ‚Ä¢ Mode conversationnel : python iotbreaker.py")
        print("   ‚Ä¢ Mode script : python iotbreaker.py scripts/audit_iot_rapide.yaml")
    else:
        print("\n‚ö†Ô∏è Des probl√®mes ont √©t√© d√©tect√©s en situation r√©elle.")
        print("   V√©rifiez la configuration et les d√©pendances.")

if __name__ == "__main__":
    main() 